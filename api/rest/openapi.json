{"openapi": "3.1.0", "info": {"title": "FastAPI", "version": "0.1.0"}, "paths": {"/cadip/{station}/cadu": {"get": {"summary": "Download", "description": "Initiate an asynchronous download process using EODAG (Earth Observation Data Access Gateway).\n\nParameters\n----------\nstation : str\n    Identifier of the Earth Observation station.\nid : str, optional\n    Unique identifier associated with the data to be downloaded.\nname : str, optional\n    Name of the data product to be downloaded.\nlocal : str, optional\n    Local path where the downloaded data will be stored.\nobs : str, optional\n    Additional observation-related information.\n\nReturns\n-------\ndict\n    A dictionary indicating that the download process has been started.\n\nNotes\n-----\nThe function initiates an asynchronous download process by starting a new thread to execute\nthe 'start_eodag_download' function. It prints information before and after starting the thread,\nchecks the start of the thread, and updates the database with the download start status.\n\nThe actual download progress can be monitored separately, and the function returns a\ndictionary with the key \"started\" set to \"true\" to indicate that the download process has begun.\n\nExample\n-------\n>>> result = download(\"Sentinel-1\", id=\"12345\", name=\"Download_1\", local=\"/path/to/local\", obs=\"s3://bucket/data\")\n>>> print(result)\n{'started': True}", "operationId": "download_cadip__station__cadu_get", "parameters": [{"name": "station", "in": "path", "required": true, "schema": {"type": "string", "title": "Station"}}, {"name": "id", "in": "query", "required": true, "schema": {"type": "string", "title": "Id"}}, {"name": "name", "in": "query", "required": true, "schema": {"type": "string", "title": "Name"}}, {"name": "local", "in": "query", "required": false, "schema": {"type": "string", "default": "", "title": "Local"}}, {"name": "obs", "in": "query", "required": false, "schema": {"type": "string", "default": "", "title": "Obs"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/cadip/{station}/cadu/list": {"get": {"summary": "List Cadu Handler", "description": "Endpoint to retrieve a list of products from the CADU system for a specified station.\n\nParameters\n----------\nstation : str\n    Identifier for the CADIP station (MTI, SGS, MPU, INU, etc).\nstart_date : str, optional\n    Start date for time series filter (format: \"YYYY-MM-DDThh:mm:sssZ\").\nstop_date : str, optional\n    Stop date for time series filter (format: \"YYYY-MM-DDThh:mm:sssZ\").\n\nReturns\n-------\nJSONResponse\n    A JSON response containing the list of products (ID, Name) for the specified station.\n    If the station identifier is invalid, a 400 Bad Request response is returned.\n    If no products were found in the mentioned time range, output is an empty list.\n\nExample\n-------\n- Request:\n    GET /cadip/station123/cadu/list?start_date=\"1999-01-01T12:00:00.000Z\"&stop_date=\"2033-02-20T12:00:00.000Z\"\n- Response:\n    {\n        \"station123\": [\n            (1, 'Product A'),\n            (2, 'Product B'),\n            ...\n        ]\n    }\n\nNotes\n-----\n- If both start_date and stop_date are provided, products within the specified date range are retrieved.\n- The response includes a JSON representation of the list of products for the specified station.\n- In case of an invalid station identifier, a 400 Bad Request response is returned.", "operationId": "list_cadu_handler_cadip__station__cadu_list_get", "parameters": [{"name": "station", "in": "path", "required": true, "schema": {"type": "string", "title": "Station"}}, {"name": "start_date", "in": "query", "required": true, "schema": {"type": "string", "title": "Start Date"}}, {"name": "stop_date", "in": "query", "required": true, "schema": {"type": "string", "title": "Stop Date"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/": {"get": {"summary": "Home", "description": "Docstring will be here.", "operationId": "home__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}}, "components": {"schemas": {"HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}}}}