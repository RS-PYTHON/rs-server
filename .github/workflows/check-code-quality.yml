name: Check code quality

# TODO determine when we launch CI automatically
# TODO handle CI on an orphan branch ?
# TODO don't fail on error
on:
  push:
    # branches:
    #   - 'feat**'

  pull_request:
    types: [opened, synchronize, reopened]

  workflow_dispatch:

env:
  SOURCES: src
  TESTS: tests
  REPORTS: .reports

jobs:

  check-format:
    runs-on: ubuntu-latest
    name: Check format (black)
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install-python
      - uses: psf/black@stable
        with:
          options: --check --verbose

  check-linting:
    runs-on: ubuntu-latest
    name: Check linting (ruff, flake8)
    steps:
      - uses: actions/checkout@v3      
      - uses: ./.github/actions/poetry-install      
      - run: poetry run ruff check --output-format=github . # used by pre-commit
        shell: bash
      - run: poetry run flake8 ${SOURCES} ${TESTS} --output-file ${REPORTS}/flake8.txt # used by sonarqube
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: flake8
          # We must give a random file (.flake8) in addition to the dir, so it is saved as a dir in the artifact.
          path: |
            .reports
            .flake8
          retention-days: 1

  check-typing:
    runs-on: ubuntu-latest
    name: Check typing (mypy)
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/poetry-install
      - run: poetry run mypy .
        shell: bash

  # TODO to be completed
  # check-vulnerabilities:
  #   runs-on: ubuntu-latest
  #   name: Check vulnerabilities (trivy)
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-type: 'fs'
  #         scan-ref: '.'

  run-unit-tests:
    runs-on: ubuntu-latest
    name: Run unit tests (pytest)
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/poetry-install
      - run: |
          set -x && poetry run pytest ${TESTS} \
            -m unit \
            --cov=${SOURCES} \
            --junit-xml=${REPORTS}/TEST-pytests.xml \
            --cov-report=xml:${REPORTS}/coverage.xml \
            --durations=0 \
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: pytest-unit
          path: |
            .coverage
            .reports
          retention-days: 1

  test-julien:
    runs-on: ubuntu-latest
    name: test
    needs: [check-linting, run-unit-tests]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: flake8
      - uses: actions/download-artifact@v3
        with:
          name: pytest-unit
      - name: Print the final result
        shell: bash
        run: |
          find .

  run-integration-tests:
    runs-on: ubuntu-latest
    name: Run integration tests (pytest)
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/poetry-install
      - run: poetry run pytest -m "integration" tests
        shell: bash

  # TODO add when writen
  #  - sonar project configuration
  #  - export previous elements as reports for sonar
  # generate-quality-report:
  #   runs-on: ubuntu-latest
  #   name: Generate quality report (sonarqube)
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: kitabisa/sonarqube-action@v1.2.0
  #       with:
  #         host: ${{ secrets.SONARQUBE_HOST }}
  #         login: ${{ secrets.SONARQUBE_TOKEN }}
  #         #password: ""
