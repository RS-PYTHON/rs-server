name: Check code quality

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  PYTHON_VERSION: 3.11
  SOURCES: src
  TESTS: tests
  SONAR_PROJECT_KEY: RS-PYTHON_rs-server_AYw0m7ixvQv-JMsowILQ

jobs:

  check-format:
    runs-on: ubuntu-latest
    name: Check format (black, isort)
    steps:
      - uses: actions/checkout@v4
      - name: Run black
        uses: psf/black@stable
        with:
          options: --check --verbose
      - name: Run isort
        uses: isort/isort-action@v1
        with:
          sort-paths: ${{ env.SOURCES }} ${{ env.TESTS }}
          configuration: --check-only --diff

  check-linting:
    runs-on: ubuntu-latest
    name: Check linting (ruff, flake8)
    steps:
      - uses: actions/checkout@v4      

      # Used by pre-commit
      - name: Run ruff
        uses: chartboost/ruff-action@v1
        with: 
          src: ${{ env.SOURCES }} ${{ env.TESTS }}
          args: --output-format=github

      # Used by sonarqube. See the .flake8 file for configuration.
      - name: Run flake8
        uses: py-actions/flake8@v2
        with:
          path: ${{ env.SOURCES }} ${{ env.TESTS }}
          args: --output-file .reports/flake8.txt

      - name: Save reports
        uses: actions/upload-artifact@v3
        with:
          name: check-linting
          path: | # add a random file (.gitignore) so .reports/ is saved as a dir
            .reports
            .gitignore
          retention-days: 1

  check-typing:
    runs-on: ubuntu-latest
    name: Check typing (mypy)
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/poetry-install
      - name: Run mypy
        run: poetry run mypy --explicit-package-bases ${SOURCES} ${TESTS}
        shell: bash

  check-security:
    runs-on: ubuntu-latest
    name: Check security (bandit)
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/poetry-install

      - name: Run bandit
        run: |
            set -x && mkdir -p .reports && \
            poetry run bandit -c bandit.yml -r ${SOURCES} -f json -o .reports/bandit.json
        shell: bash
         # note: the CI will still run, the issues are reported in sonarqube, we will resolve them later
        continue-on-error: true

      - name: Save reports
        uses: actions/upload-artifact@v3
        with:
          name: check-security
          path: | # add a random file (.gitignore) so .reports/ is saved as a dir
            .reports
            .gitignore
          retention-days: 1
      # TODO: use trivy ?
      # - uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: 'fs'
      #     scan-ref: '.'

  check-deps-security:
    runs-on: ubuntu-latest
    name: Check dependencies security (safety)
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/poetry-install

      - name: Run safety
        run: poetry run safety check --full-report
        shell: bash
        # note: the CI will still run, we will resolve issues later
        continue-on-error: true

  run-unit-tests:
    runs-on: ubuntu-latest
    name: Run unit tests (pytest)
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/poetry-install

      - name: Run unit tests
        run: |
          set -x && poetry run pytest ${TESTS} \
            -m unit \
            --durations=0 \
            --error-for-skips \
            --cov=${SOURCES} \
            --cov-report=term \
            --cov-report=xml:.reports/coverage.xml \
            --junit-xml=.reports/TEST-pytests.xml \
        shell: bash

      - name: Display code coverage summary in this console
        uses: irongut/CodeCoverageSummary@v1.3.0
        with: # see https://github.com/marketplace/actions/code-coverage-summary#inputs
          filename: .reports/coverage.xml

      - name: Save reports
        uses: actions/upload-artifact@v3
        with:
          name: run-unit-tests
          path: |
            .coverage
            .reports
          retention-days: 1

  # TODO: what the integration tests should be, what is the difference from the unit tests ?
  # Should they be scheduled or run only when merging to the develop or main branch ?
  # Note that in the code below, the integration tests will not be counted for the code coverage in sonarqube.
  run-integration-tests:
    runs-on: ubuntu-latest
    name: Run integration tests (pytest)
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/poetry-install

      - name: Run integration tests
        run: |
          set -x && poetry run pytest ${TESTS} \
            -m integration \
            --durations=0 \
            --error-for-skips \
            --cov=${SOURCES} \
            --cov-report=term \
            --cov-report=xml:.reports/coverage-integration.xml \
        shell: bash

      - name: Display code coverage summary in this console
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: .reports/coverage-integration.xml

  generate-quality-report:
    runs-on: ubuntu-latest
    name: Quality report (sonarqube)
    needs: [check-linting, check-security, run-unit-tests] # see actions/download-artifact below
    if: always() # generate quality reports even if previous jobs failed
    permissions: write-all # let phwt/sonarqube-quality-gate-action write a pull request comment
    steps:
      - uses: actions/checkout@v4
      - name: Download linting reports
        uses: actions/download-artifact@v3
        with:
          name: 
            check-linting
      - name: Download vulnerability reports
        uses: actions/download-artifact@v3
        with:
          name: 
            check-security
      - name: Download unit test reports
        uses: actions/download-artifact@v3
        with:
          name: 
            run-unit-tests

      - name: Run sonarqube
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          # Note: other options ?
          # --debug
          # -Dsonar.projectName=test-project
          # -Dsonar.links.homepage=https://sonarqube.ops-csc.com/dashboard?id=test-project
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.branch.name=${{ github.ref_name }}
            -Dsonar.projectBaseDir=.
            -Dsonar.sources=${{ env.SOURCES }}
            -Dsonar.tests=${{ env.TESTS }}
            -Dsonar.exclusions=
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.language=py
            -Dsonar.python.version=${{ env.PYTHON_VERSION }}
            -Dsonar.python.flake8.reportPaths=".reports/flake8.txt"
            -Dsonar.python.bandit.reportPaths=".reports/bandit.json"
            -Dsonar.python.xunit.reportPath=".reports/TEST-*.xml"
            -Dsonar.python.coverage.reportPaths=".reports/coverage.xml"

      - name: Wait for quality gate result
        run: sleep 5

      - name: Report quality gate result in the pull request comment
        uses: phwt/sonarqube-quality-gate-action@v1
        id: quality-gate-result
        with:
          sonar-project-key: ${{ env.SONAR_PROJECT_KEY }}
          sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref_name }}

      - name: Output result
        run: |
          echo "${{ steps.quality-gate-result.outputs.project-status }}"
          echo "${{ steps.quality-gate-result.outputs.quality-gate-result }}"

      - name: Check quality gate status
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # Mark the step as OK even if the sonarqube quality gate doesn't pass. 
        # We will resolve these issues later.
        continue-on-error: true