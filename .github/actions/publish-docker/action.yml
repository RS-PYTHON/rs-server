name: publish-docker
description: Publish Docker image

inputs:
  dockerfile:
    description: Dockerfile path
    required: true
  build_context_path:
    description: "'docker build' context path"
    required: true
  version_name:
    description: Version name e.g. 1.2.3a4.dev1a2b3c4d
    required: true
  github_token:
    description: secrets.GITHUB_TOKEN
    required: true

# Copied from https://github.com/COPRS/reference-system-software/blob/dependencies
# and https://github.com/COPRS/reference-system-software/blob/trivy-security-scan-v1/action.yml

runs:
  using: "composite"
  steps:

    # Extract metadata from Git reference and GitHub events
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE_NAME }}

    # Build Docker image using Buildx
    # This Action automatically pulls the code from the branch it's launched from
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./whl
        file: ${{ inputs.dockerfile }}
        load: true
        tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ inputs.version_name }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Run Trivy vulnerability scanner SARIF
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE_NAME }}:${{ inputs.version_name }}
        format: sarif
        output: trivy-results.sarif
        #severity: HIGH,CRITICAL
        #timeout: '30m'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always() # run even if the scan returned a non-zero exit code
      with:
        sarif_file: trivy-results.sarif
        #category: 'scan-${{ inputs.ARTIFACT_NAME }}'

    - name: Log into Docker registry ${{ env.DOCKER_REGISTRY }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ inputs.github_token }}

    - name: Push image
      run: docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ inputs.version_name }}
      shell: bash
