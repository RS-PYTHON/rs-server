[project]
name = "rs-server"
version = "0.0.0" # see: https://github.com/mtkennerly/poetry-dynamic-versioning

[tool.poetry]
name = "rs-server"
version = "0.0.0"
description = ""
authors = ["Your Name <you@example.com>"]
readme = "README.md"

packages = [

    { include = "rs_server_adgs", from = "services/adgs"},
    { include = "rs_server_cadip", from = "services/cadip" },
    { include = "rs_server_catalog", from = "services/catalog" },
    { include = "rs_server_common", from = "services/common"},
    { include = "rs_server_frontend", from = "services/frontend"},
    { include = "rs_server_staging", from = "services/staging"},

    { include = "tests", format = "sdist" },
    # { include = "services/adgs/tests", format = "sdist" },
    # { include = "services/cadip/tests", format = "sdist" },
    { include = "services/catalog/tests", format = "sdist" },
    { include = "services/common/tests", format = "sdist" },
    { include = "services/frontend/tests", format = "sdist" },
    { include = "services/staging/tests", format = "sdist" },
]

# This root project is not used in release production.
# It's only used by the CI/CD to run pytest, pylint, mypy etc... on the whole github project.

# All the dependencies for release are set in the sub-projects
[tool.poetry.dependencies]
python = "^3.11"
rs-server-adgs = {path = "services/adgs", develop = true}
rs-server-cadip = {path = "services/cadip", develop = true}
rs-server-catalog = {path = "services/catalog", develop = true}
rs-server-common = {path = "services/common", develop = true}
rs-server-frontend = {path = "services/frontend", develop = true}
# We cannot depend on rs-server-staging because it depends on sqlalchemy<2
# rs-server-staging = {path = "services/staging", develop = true}

[tool.poetry.group.dev]
optional = true

# All the dev dependencies are set here so they can be used by the CI.
[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
pytest-docker = "^3.1.0"
pytest-error-for-skips = "^2.0.2"
pytest-httpx = "^0.32.0"
pytest-mock = "^3.14.0"
black = "^24.8.0"
mypy = "^1.11.2"
pre-commit = "^3.8.0"
types-requests = "^2.32.0.20240914"
flake8 = "^7.1.1"
bandit = "^1.7.9"
safety = "^3.2.3"
pylint = "^3.3.0"
flake8-pyproject = "^1.2.3"
httpx = "^0.27.2"
moto = "==5.0.15"
flask = "^3.0.3"
flask-cors = "^5.0.0"
sphinx = "^7.4.7"
sphinx-rtd-theme = "^2.0.0"
orjson = [ # we need the same markers and versions as in eodag: https://github.com/CS-SI/eodag/blob/develop/setup.cfg
    {version = "<3.10.0", markers = "python_version>='3.12' and platform_system=='Windows'"},
    {version = "^3.10", markers = "python_version<'3.12' or platform_system!='Windows'"},
]
sqlalchemy-utils = "^0.41.2"

[tool.poetry-dynamic-versioning] # needs: poetry self add "poetry-dynamic-versioning[plugin]"
enable = true
tagged-metadata = true

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.black]
line-length = 120

[tool.pytest.ini_options]
markers = [
    "unit", # mark a test as unittest
    "integration", # mark a test as integration test
]
asyncio_mode = "auto"

[tool.mypy]
warn_redundant_casts = true
# Force analyze of partially annotate function signatures
check_untyped_defs = true
ignore_missing_imports = true

[tool.flake8]
max-line-length = 120
# per-file-ignores = [
#     '__init__.py:F401',
# ]

[tool.pylint]
max-line-length = 120
disable = [
    "logging-fstring-interpolation",  # Logging f-string interpolation
    "R0917"  # Too many positional arguments
]
ignore-paths = '^docs/.*$'

# Only add notes as comments that are not checked for errors.
notes = ["XXX"]  # No errors on TODO and FIXME

min-similarity-lines = 10  # Minimum lines number of a similarity

[tool.bandit.assert_used]
skips = ['*/test_*.py']
